import React, { useState, useEffect } from 'react';
import {
  Card, CardContent, Typography, Button, List, ListItem, ListItemText,
  Chip, Box, Dialog, DialogTitle, DialogContent, DialogActions,
  TextField, Alert, CircularProgress, Divider
} from '@mui/material';
import { 
  CheckCircle, Schedule, Person, Phone, AccessTime, 
  PlayArrow, Stop, Notifications 
} from '@mui/icons-material';
import axios from 'axios';

const DoctorQueue = ({ doctorId }) => {
  const [queue, setQueue] = useState([]);
  const [loading, setLoading] = useState(false);
  const [completionDialog, setCompletionDialog] = useState(false);
  const [selectedAppointment, setSelectedAppointment] = useState(null);
  const [queueStats, setQueueStats] = useState({});

  useEffect(() => {
    if (doctorId) {
      loadQueue();
      // Refresh queue every 30 seconds
      const interval = setInterval(loadQueue, 30000);
      return () => clearInterval(interval);
    }
  }, [doctorId]);

  const loadQueue = async () => {
    try {
      const response = await axios.get(`/api/appointments/doctor-queue/${doctorId}`);
      setQueue(response.data.queue || []);
      setQueueStats({
        total: response.data.totalAppointments,
        completed: response.data.completed,
        pending: response.data.pending,
        currentPatient: response.data.currentPatient
      });
    } catch (error) {
      console.error('Queue loading error:', error);
    }
  };

  const startConsultation = async (appointmentId) => {
    setLoading(true);
    try {
      await axios.post(`/api/appointments/start/${appointmentId}`);
      loadQueue(); // Refresh queue
      alert('Consultation started!');\n    } catch (error) {\n      alert('Failed to start consultation');\n    }\n    setLoading(false);\n  };\n\n  const completeConsultation = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.post(\n        `/api/appointments/complete-consultation/${selectedAppointment._id}`,\n        { doctorId }\n      );\n      \n      alert(`${response.data.message}\\n\\nRescheduled ${response.data.rescheduledCount} patients to earlier slots!`);\n      setCompletionDialog(false);\n      setSelectedAppointment(null);\n      loadQueue(); // Refresh queue\n    } catch (error) {\n      alert('Failed to complete consultation');\n    }\n    setLoading(false);\n  };\n\n  const openCompletionDialog = (appointment) => {\n    setSelectedAppointment(appointment);\n    setCompletionDialog(true);\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed': return 'success';\n      case 'in-progress': return 'warning';\n      case 'scheduled': return 'primary';\n      default: return 'default';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed': return <CheckCircle />;\n      case 'in-progress': return <PlayArrow />;\n      case 'scheduled': return <Schedule />;\n      default: return <Schedule />;\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h5\" gutterBottom>\n        ðŸ“‹ Today's Queue\n      </Typography>\n\n      {/* Queue Statistics */}\n      <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>\n        <Card variant=\"outlined\">\n          <CardContent sx={{ textAlign: 'center', py: 2 }}>\n            <Typography variant=\"h4\" color=\"primary\">{queueStats.total || 0}</Typography>\n            <Typography variant=\"body2\">Total Appointments</Typography>\n          </CardContent>\n        </Card>\n        <Card variant=\"outlined\">\n          <CardContent sx={{ textAlign: 'center', py: 2 }}>\n            <Typography variant=\"h4\" color=\"success.main\">{queueStats.completed || 0}</Typography>\n            <Typography variant=\"body2\">Completed</Typography>\n          </CardContent>\n        </Card>\n        <Card variant=\"outlined\">\n          <CardContent sx={{ textAlign: 'center', py: 2 }}>\n            <Typography variant=\"h4\" color=\"warning.main\">{queueStats.pending || 0}</Typography>\n            <Typography variant=\"body2\">Pending</Typography>\n          </CardContent>\n        </Card>\n      </Box>\n\n      {/* Current Patient Alert */}\n      {queueStats.currentPatient && (\n        <Alert \n          severity=\"info\" \n          sx={{ mb: 3 }}\n          icon={<Person />}\n        >\n          <strong>Next Patient:</strong> {queueStats.currentPatient.patient?.name} \n          at {new Date(queueStats.currentPatient.appointmentTime).toLocaleTimeString()}\n        </Alert>\n      )}\n\n      {/* Queue List */}\n      <Card>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            Patient Queue ({queue.length})\n          </Typography>\n          \n          {queue.length === 0 ? (\n            <Typography color=\"textSecondary\" sx={{ textAlign: 'center', py: 4 }}>\n              No appointments scheduled for today\n            </Typography>\n          ) : (\n            <List>\n              {queue.map((appointment, index) => (\n                <React.Fragment key={appointment._id}>\n                  <ListItem \n                    sx={{ \n                      bgcolor: appointment.isNext ? 'primary.light' : 'transparent',\n                      borderRadius: 1,\n                      mb: 1\n                    }}\n                  >\n                    <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>\n                      {/* Position Number */}\n                      <Box sx={{ \n                        minWidth: 40, \n                        height: 40, \n                        borderRadius: '50%', \n                        bgcolor: appointment.isNext ? 'primary.main' : 'grey.300',\n                        color: appointment.isNext ? 'white' : 'text.primary',\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        fontWeight: 'bold',\n                        mr: 2\n                      }}>\n                        {appointment.position}\n                      </Box>\n\n                      {/* Patient Info */}\n                      <ListItemText\n                        primary={\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                            <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                              {appointment.patient?.name}\n                            </Typography>\n                            <Chip \n                              icon={getStatusIcon(appointment.status)}\n                              label={appointment.status.toUpperCase()}\n                              color={getStatusColor(appointment.status)}\n                              size=\"small\"\n                            />\n                            {appointment.isNext && (\n                              <Chip label=\"NEXT\" color=\"primary\" size=\"small\" />\n                            )}\n                          </Box>\n                        }\n                        secondary={\n                          <Box>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                              <AccessTime sx={{ fontSize: 16, mr: 0.5 }} />\n                              {new Date(appointment.appointmentTime).toLocaleTimeString()}\n                              {appointment.estimatedWaitTime > 0 && (\n                                <span> â€¢ Wait: ~{appointment.estimatedWaitTime} min</span>\n                              )}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                              <Phone sx={{ fontSize: 16, mr: 0.5 }} />\n                              {appointment.patient?.phone}\n                            </Typography>\n                            {appointment.symptoms && (\n                              <Typography variant=\"body2\" sx={{ mt: 0.5 }}>\n                                <strong>Symptoms:</strong> {appointment.symptoms}\n                              </Typography>\n                            )}\n                            {appointment.rescheduledFrom && (\n                              <Alert severity=\"info\" sx={{ mt: 1, py: 0 }}>\n                                <Typography variant=\"caption\">\n                                  Rescheduled from {new Date(appointment.rescheduledFrom).toLocaleTimeString()}\n                                </Typography>\n                              </Alert>\n                            )}\n                          </Box>\n                        }\n                      />\n\n                      {/* Action Buttons */}\n                      <Box sx={{ ml: 2 }}>\n                        {appointment.status === 'scheduled' && (\n                          <Button\n                            variant=\"contained\"\n                            startIcon={<PlayArrow />}\n                            onClick={() => startConsultation(appointment._id)}\n                            disabled={loading}\n                            sx={{ mr: 1 }}\n                          >\n                            Start\n                          </Button>\n                        )}\n                        {appointment.status === 'in-progress' && (\n                          <Button\n                            variant=\"contained\"\n                            color=\"success\"\n                            startIcon={<CheckCircle />}\n                            onClick={() => openCompletionDialog(appointment)}\n                            disabled={loading}\n                          >\n                            Complete\n                          </Button>\n                        )}\n                        {appointment.status === 'completed' && (\n                          <Chip \n                            icon={<CheckCircle />}\n                            label=\"Done\"\n                            color=\"success\"\n                            variant=\"outlined\"\n                          />\n                        )}\n                      </Box>\n                    </Box>\n                  </ListItem>\n                  {index < queue.length - 1 && <Divider />}\n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Completion Dialog */}\n      <Dialog open={completionDialog} onClose={() => setCompletionDialog(false)} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>\n          âœ… Complete Consultation\n        </DialogTitle>\n        <DialogContent>\n          <Typography gutterBottom>\n            Mark consultation with <strong>{selectedAppointment?.patient?.name}</strong> as completed?\n          </Typography>\n          <Alert severity=\"info\" sx={{ mt: 2 }}>\n            <Typography variant=\"body2\">\n              ðŸš€ <strong>Smart Queue Management:</strong><br/>\n              Other patients will be automatically moved to earlier time slots!\n            </Typography>\n          </Alert>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCompletionDialog(false)}>Cancel</Button>\n          <Button \n            variant=\"contained\" \n            color=\"success\"\n            onClick={completeConsultation}\n            disabled={loading}\n            startIcon={loading ? <CircularProgress size={20} /> : <CheckCircle />}\n          >\n            Complete Consultation\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default DoctorQueue;